<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bit Manipulation on 木秀于南</title>
    <link>http://yjn93.github.io/tags/bit-manipulation/</link>
    <description>Recent content in Bit Manipulation on 木秀于南</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2016 Jianan Yue. All right reserved.</copyright>
    <lastBuildDate>Sun, 13 Nov 2016 10:46:27 -0500</lastBuildDate>
    <atom:link href="http://yjn93.github.io/tags/bit-manipulation/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bit Manipulation</title>
      <link>http://yjn93.github.io/dev/Bit-Manipulation/</link>
      <pubDate>Sun, 13 Nov 2016 10:46:27 -0500</pubDate>
      
      <guid>http://yjn93.github.io/dev/Bit-Manipulation/</guid>
      <description>

&lt;h1 id=&#34;clever-tricks:3344d83625fb333615fef7b8a8bdad05&#34;&gt;Clever Tricks&lt;/h1&gt;

&lt;h3 id=&#34;get-the-rightmost-set-bit:3344d83625fb333615fef7b8a8bdad05&#34;&gt;Get the rightmost set bit&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;	num &amp;amp;= -num;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;set-the-rightmost-1-to-0:3344d83625fb333615fef7b8a8bdad05&#34;&gt;Set the rightmost 1 to 0&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;	num &amp;amp;= (num-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;facts:3344d83625fb333615fef7b8a8bdad05&#34;&gt;Facts&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;~(num-1) == -num&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;single-number-iii:3344d83625fb333615fef7b8a8bdad05&#34;&gt;Single Number III&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/single-number-iii/&#34;&gt;LeetCode 260&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.&lt;/p&gt;

&lt;h2 id=&#34;example:3344d83625fb333615fef7b8a8bdad05&#34;&gt;Example:&lt;/h2&gt;

&lt;p&gt;Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].&lt;/p&gt;

&lt;h2 id=&#34;solution:3344d83625fb333615fef7b8a8bdad05&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;In the first pass of for loop, we XOR all elements in the array, and get the XOR of the two numbers we need to find.&lt;/p&gt;

&lt;p&gt;The second pass is hard to come up with, we use the trick in the first session to get the rightmost set bit of the XOR of the two target number. We can divide all elements in two groups, and the target two numbers will fall into different groups.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public int[] singleNumber(int[] nums) {
        int diff = 0;
        for(int num: nums) {
            diff ^= num;
        }
        diff &amp;amp;= -diff;
        int[] result = {0,0};
        for(int num: nums) {
            if((num &amp;amp; diff) == 0)
                result[0] ^= num;
            else
                result[1] ^= num;
        }
        return result;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;single-number-ii:3344d83625fb333615fef7b8a8bdad05&#34;&gt;Single Number II&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/single-number-ii/&#34;&gt;LeetCode 137&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given an array of integers, every element appears three times except for one. Find that single one.&lt;/p&gt;

&lt;h2 id=&#34;solution-1:3344d83625fb333615fef7b8a8bdad05&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    public int singleNumber(int[] nums) {
        int ones = 0, twos = 0;
        for(int num: nums) {
            ones = (ones ^ num) &amp;amp; ~twos;
            twos = (twos ^ num) &amp;amp; ~ones;
        }
        return ones;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;missing-number:3344d83625fb333615fef7b8a8bdad05&#34;&gt;Missing Number&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/missing-number/&#34;&gt;LeetCode 268&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given an array containing n distinct numbers taken from 0, 1, 2, &amp;hellip;, n, find the one that is missing from the array.&lt;/p&gt;

&lt;h2 id=&#34;example-1:3344d83625fb333615fef7b8a8bdad05&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;Given nums = [0, 1, 3] return 2.&lt;/p&gt;

&lt;h2 id=&#34;solution-2:3344d83625fb333615fef7b8a8bdad05&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    public int missingNumber(int[] nums) {
        int result = nums.length;
        for(int i = 0; i &amp;lt; nums.length; i ++) {
            result ^= i;
            result ^= nums[i];
        }
        return result;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;integer-replacement:3344d83625fb333615fef7b8a8bdad05&#34;&gt;Integer Replacement&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/integer-replacement/&#34;&gt;LeetCode 397&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given a positive integer n and you can do operations as follow:&lt;/p&gt;

&lt;p&gt;If n is even, replace n with n/2.&lt;/p&gt;

&lt;p&gt;If n is odd, you can replace n with either n + 1 or n - 1.&lt;/p&gt;

&lt;p&gt;What is the minimum number of replacements needed for n to become 1?&lt;/p&gt;

&lt;h2 id=&#34;example-2:3344d83625fb333615fef7b8a8bdad05&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;Input: 8&lt;/p&gt;

&lt;p&gt;Output: 3&lt;/p&gt;

&lt;p&gt;Explanation: 8 -&amp;gt; 4 -&amp;gt; 2 -&amp;gt; 1&lt;/p&gt;

&lt;p&gt;Input: 7&lt;/p&gt;

&lt;p&gt;Output: 4&lt;/p&gt;

&lt;p&gt;Explanation: 7 -&amp;gt; 8 -&amp;gt; 4 -&amp;gt; 2 -&amp;gt; 1 or 7 -&amp;gt; 6 -&amp;gt; 3 -&amp;gt; 2 -&amp;gt; 1&lt;/p&gt;

&lt;h2 id=&#34;solution-3:3344d83625fb333615fef7b8a8bdad05&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;Recursion will cause StackOverFlow. There are two ways for this problem. One uses iteration, one use bit manipulation.&lt;/p&gt;

&lt;h3 id=&#34;iteration:3344d83625fb333615fef7b8a8bdad05&#34;&gt;Iteration&lt;/h3&gt;

&lt;p&gt;When n is odd it can be written into the form n = 2k+1 (k is a non-negative integer.). That is, n+1 = 2k+2 and n-1 = 2k. Then, (n+1)/2 = k+1 and (n-1)/2 = k. So one of (n+1)/2 and (n-1)/2 is even, the other is odd. And the &amp;ldquo;best&amp;rdquo; case of this problem is to divide as much as possible. Because of that, always pick n+1 or n-1 based on if it can be divided by 4. The only special case of that is when n=3 you would like to pick n-1 rather than n+1.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public int integerReplacement(int n) {
        if(n == Integer.MAX_VALUE) return 32;
        int count = 0;
        while(n != 1) {
            if(n % 2 == 0) {
                n /= 2;
            } else {
                if((n + 1) % 4 == 0 &amp;amp;&amp;amp; n != 3)
                    n += 1;
                else
                    n -= 1;
            }
            count ++;
        }
        return count;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bit-manipulation:3344d83625fb333615fef7b8a8bdad05&#34;&gt;Bit Manipulation&lt;/h3&gt;

&lt;p&gt;We can use the same idea to do bit manipulation. When n is odd, we only need to check the last two bits of n. If the second least significant bit is 1, then increase n by 1, unless n is 3.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public int integerReplacement(int n) {
        int count = 0;
        while(n != 1) {
            if(n % 2 == 0)
                n &amp;gt;&amp;gt;&amp;gt;= 1;
            else if(n == 3 || ((n &amp;gt;&amp;gt;&amp;gt; 1) &amp;amp; 1) == 0)
                n --;
            else 
                n ++;
            count ++;
        }
        return count;
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Counting Bits</title>
      <link>http://yjn93.github.io/dev/Counting-Bits/</link>
      <pubDate>Sat, 12 Nov 2016 15:10:24 -0500</pubDate>
      
      <guid>http://yjn93.github.io/dev/Counting-Bits/</guid>
      <description>

&lt;h1 id=&#34;problem-description:022354bb3fdd3cdde4f44cb9f57b56b0&#34;&gt;Problem description&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/counting-bits/&#34;&gt;LeetCode 338&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1&amp;rsquo;s in their binary representation and return them as an array.&lt;/p&gt;

&lt;h2 id=&#34;example:022354bb3fdd3cdde4f44cb9f57b56b0&#34;&gt;Example:&lt;/h2&gt;

&lt;p&gt;For num = 5 you should return [0,1,1,2,1,2]&lt;/p&gt;

&lt;h2 id=&#34;my-dp-solution:022354bb3fdd3cdde4f44cb9f57b56b0&#34;&gt;My DP Solution&lt;/h2&gt;

&lt;p&gt;This problem can be solved by dynamic programming because the count of bits follow certains rules as the number grows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;		0	0
		1	1
		2	10
		3	11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The number 2 is adding another bit 1 in front of number 0; the number 3 is adding another bit 1 at the beginning of number 1. So my solution is to track the previous size of numbers that can be represented by a fix number of bits. For example, we have 0, 1 initially, the size is 2. Then for 3, 4, we apply the formula:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dp[i] = dp[i-size] + 1
dp[2] = dp[2 - 2] + 1 = dp[0] + 1 
dp[3] = dp[3 - 2] + 1 = dp[1] + 1

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, for number 4, we need more bits to represent it, so the previous size is updated to 4, and dp[4], dp[5], dp[6], dp[7] can be calculated by dp[0], dp[1], dp[2], dp[3]. My code is as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public int[] countBits(int num) {
        if(num == 0) return new int[]{0};
        int[] dp = new int[num+1];
        dp[0] = 0;
        dp[1] = 1;
        int size = 2;
        for(int i = 2; i &amp;lt;= num; i ++) {
            if(i - size == size)
                size = i;
            dp[i] = 1 + dp[i-size];
        }
        return dp;
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;another-dp-solution-combining-bit-manipulation:022354bb3fdd3cdde4f44cb9f57b56b0&#34;&gt;Another DP solution combining Bit Manipulation&lt;/h2&gt;

&lt;p&gt;Instead of adding the bit 1 infront of the previous cycle, this brilliant solution think it as deleting the last bit to obtain the number of bits without last bit, then add another counting for last bit if the last bit is 1.&lt;/p&gt;

&lt;p&gt;4-line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public int[] countBits(int num) {
        int[] dp = new int[num+1];
        for(int i = 1; i &amp;lt;= num; i ++) 
            dp[i] = dp[i&amp;gt;&amp;gt;1] + (i&amp;amp;1);
        return dp;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the priority for &amp;amp; operator is lower than +, so we need to use () for (i&amp;amp;1).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>