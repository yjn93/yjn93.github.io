<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dp on 木秀于南</title>
    <link>http://yjn93.github.io/tags/dp/</link>
    <description>Recent content in Dp on 木秀于南</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2016 Jianan Yue. All right reserved.</copyright>
    <lastBuildDate>Sat, 24 Dec 2016 19:38:38 -0500</lastBuildDate>
    <atom:link href="http://yjn93.github.io/tags/dp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Wiggle Subsequence</title>
      <link>http://yjn93.github.io/dev/WiggleSequence/</link>
      <pubDate>Sat, 24 Dec 2016 19:38:38 -0500</pubDate>
      
      <guid>http://yjn93.github.io/dev/WiggleSequence/</guid>
      <description>

&lt;h1 id=&#34;wiggle-subsequence:5a249ba779613037888e50c3f36770e8&#34;&gt;Wiggle Subsequence&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/wiggle-subsequence/&#34;&gt;LeetCode 376&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A sequence of numbers is called a wiggle sequence if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.&lt;/p&gt;

&lt;h2 id=&#34;example:5a249ba779613037888e50c3f36770e8&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Input: [1,7,4,9,2,5]
Output: 6
The entire sequence is a wiggle sequence.

Input: [1,17,5,10,13,15,10,5,16,8]
Output: 7
There are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].

Input: [1,2,3,4,5,6,7,8,9]
Output: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution:5a249ba779613037888e50c3f36770e8&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;Use two variable up and down to track current maximum length of subsequence that end with up and down respectively.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public int wiggleMaxLength(int[] nums) {

        if(nums.length &amp;lt; 2) return nums.length;

        int up = 1, down = 1;

        for(int i = 1; i &amp;lt; nums.length; i ++) {

            if(nums[i] &amp;gt; nums[i-1])

                up = down + 1;

            else if (nums[i] &amp;lt; nums[i-1])

                down = up + 1;

        }

        return Math.max(up, down);

    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GuessNumber</title>
      <link>http://yjn93.github.io/dev/GuessNumber/</link>
      <pubDate>Sat, 24 Dec 2016 13:02:42 -0500</pubDate>
      
      <guid>http://yjn93.github.io/dev/GuessNumber/</guid>
      <description>

&lt;h1 id=&#34;guess-number-higher-or-lower-ii:d06f8d361b54867e9a90313f9c7e4037&#34;&gt;Guess Number Higher or Lower II&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/guess-number-higher-or-lower-ii/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are playing the Guess Game. The game is as follows:&lt;/p&gt;

&lt;p&gt;I pick a number from 1 to n. You have to guess which number I picked.&lt;/p&gt;

&lt;p&gt;Every time you guess wrong, I&amp;rsquo;ll tell you whether the number I picked is higher or lower.&lt;/p&gt;

&lt;p&gt;However, when you guess a particular number x, and you guess wrong, you pay $x. You win the game when you guess the number I picked.&lt;/p&gt;

&lt;h2 id=&#34;example:d06f8d361b54867e9a90313f9c7e4037&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;n = 10, I pick 8.

First round:  You guess 5, I tell you that it&#39;s higher. You pay $5.
Second round: You guess 7, I tell you that it&#39;s higher. You pay $7.
Third round:  You guess 9, I tell you that it&#39;s lower. You pay $9.

Game over. 8 is the number I picked.

You end up paying $5 + $7 + $9 = $21.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution:d06f8d361b54867e9a90313f9c7e4037&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;For each number x in range[i~j]&lt;/p&gt;

&lt;p&gt;we do: result_when_pick_x = x + max{DP([i~x-1]), DP([x+1, j])}&lt;/p&gt;

&lt;p&gt;&amp;ndash;&amp;gt; // the max means whenever you choose a number, the feedback is always bad and therefore leads you to a worse branch.&lt;/p&gt;

&lt;p&gt;then we get DP([i~j]) = min{xi, &amp;hellip; ,xj}&lt;/p&gt;

&lt;p&gt;&amp;ndash;&amp;gt; // this min makes sure that you are minimizing your cost.&lt;/p&gt;

&lt;h3 id=&#34;recursive-dp:d06f8d361b54867e9a90313f9c7e4037&#34;&gt;Recursive DP&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    public int getMoneyAmount(int n) {
        int[][] table = new int[n+1][n+1];
        return dp(table, 1, n);
    }
    
    public int dp(int[][] table, int start, int end) {
        if(start &amp;gt;= end) return 0;
        if(table[start][end] != 0) return table[start][end];
        int result = Integer.MAX_VALUE;
        for(int k = start; k &amp;lt;= end; k ++) {
            result = Math.min(result, k + Math.max(dp(table, start, k-1), dp(table, k+1, end)));
        }
        table[start][end] = result;
        return result;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;bottom-up-dp:d06f8d361b54867e9a90313f9c7e4037&#34;&gt;Bottom-up DP&lt;/h3&gt;

&lt;p&gt;Fill the table&amp;rsquo;s every column. For each column, it represents the up limit of the range, and we should fill the column from (j-1, j) to (1, j).&lt;/p&gt;

&lt;p&gt;Because for example, if i == 1, j == 5, when k = 3, we need table[4][5] be exist.&lt;/p&gt;

&lt;p&gt;Also notice the base case is when i + 1 == j, we choose i over j.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public int getMoneyAmount(int n) {
        int[][] table = new int[n+1][n+1];
        for(int j = 2; j &amp;lt;= n; j ++) {
            for(int i=j-1; i&amp;gt;0; i--) {
                int globalMin = Integer.MAX_VALUE;
                for(int k = i + 1; k &amp;lt; j; k ++) {
                    int localMax = k + Math.max(table[i][k-1], table[k+1][j]);
                    globalMin = Math.min(globalMin, localMax);
                }
                table[i][j] = i + 1 == j ? i : globalMin;
            }
        }
        return table[1][n];
    }

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Knapsack</title>
      <link>http://yjn93.github.io/dev/Knapsack/</link>
      <pubDate>Wed, 21 Dec 2016 12:19:33 -0500</pubDate>
      
      <guid>http://yjn93.github.io/dev/Knapsack/</guid>
      <description>

&lt;h1 id=&#34;knapsack-problem:c06120d33a3798cdda1b16554d032ce1&#34;&gt;Knapsack problem&lt;/h1&gt;

&lt;p&gt;Given weights (wt[i]) and values (val[i]) of n items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack.&lt;/p&gt;

&lt;h2 id=&#34;basic-dp:c06120d33a3798cdda1b16554d032ce1&#34;&gt;Basic dp&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;K[i][v]=max{K[i-1][v],K[i-1][v-wt[i]]+val[i]}

int knapSack(int W, int wt[], int val[], int n)
{
   int i, w;
   int K[n+1][W+1];
 
   // Build table K[][] in bottom up manner
   for (i = 0; i &amp;lt;= n; i++)
   {
       for (w = 0; w &amp;lt;= W; w++)
       {
           if (i==0 || w==0)
               K[i][w] = 0;
           else if (wt[i-1] &amp;lt;= w)
                 K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);
           else
                 K[i][w] = K[i-1][w];
       }
   }
 
   return K[n][W];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;space-optimization:c06120d33a3798cdda1b16554d032ce1&#34;&gt;Space optimization&lt;/h2&gt;

&lt;p&gt;To make sure in ith loop, K[v-wt[i]] stores previous K[i-1][v-wt[i]], the inner for loop should index in decreasing order.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i = 1 .. N
	for v = W .. 0
		K[v]=max{K[v],K[v-wt[i]]+val[i]}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;partition-equal-subset-sum:c06120d33a3798cdda1b16554d032ce1&#34;&gt;Partition Equal Subset Sum&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/partition-equal-subset-sum/&#34;&gt;LeetCode 416&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.&lt;/p&gt;

&lt;h2 id=&#34;example:c06120d33a3798cdda1b16554d032ce1&#34;&gt;Example:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Input: [1, 5, 11, 5]

Output: true

Explanation: The array can be partitioned as [1, 5, 5] and [11].

Input: [1, 2, 3, 5]

Output: false

Explanation: The array cannot be partitioned into equal sum subsets.

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution:c06120d33a3798cdda1b16554d032ce1&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    public boolean canPartition(int[] nums) {
        int sum = 0;
        for(int num: nums) {
            sum += num;
        }
        if(sum % 2 != 0) return false;
        sum /= 2;
        boolean[] dp = new boolean[sum + 1];
        dp[0] = true;
        for(int i = 0; i &amp;lt; nums.length; i ++) {
            for(int j = sum; j &amp;gt;= nums[i]; j --) {
                dp[j] = dp[j] || dp[j - nums[i]];
            }
        }
        
        return dp[sum];
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Combination Sum</title>
      <link>http://yjn93.github.io/dev/Combination_Sum/</link>
      <pubDate>Sat, 26 Nov 2016 10:30:22 -0500</pubDate>
      
      <guid>http://yjn93.github.io/dev/Combination_Sum/</guid>
      <description>

&lt;h1 id=&#34;combination-sum-3:7a055b9f53e64947361af5747bddcbb5&#34;&gt;Combination Sum 3&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/combination-sum-iii/&#34;&gt;LeetCode 216&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.&lt;/p&gt;

&lt;h2 id=&#34;example:7a055b9f53e64947361af5747bddcbb5&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;k = 3, n = 7
[[1,2,4]]

k = 3, n = 9
[[1,2,6], [1,3,5], [2,3,4]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution:7a055b9f53e64947361af5747bddcbb5&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;BackTracking&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; combinationSum3(int k, int n) {
        List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result = new ArrayList&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt;();
        helper(result, new ArrayList&amp;lt;Integer&amp;gt;(), k, n, 1);
        return result;
    }
    
    public void helper(List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; result, List&amp;lt;Integer&amp;gt; cur, int k, int n, int start) {
        if(k == 0 &amp;amp;&amp;amp; n == 0) {
            result.add(new ArrayList(cur));
            return;
        }
        if(k == 0 || start &amp;gt; n) return;
        for(int i = start; i &amp;lt;= 9 &amp;amp;&amp;amp; i &amp;lt;= n ; i ++) {
            cur.add(i);
            helper(result, cur, k-1, n-i, i+1);
            cur.remove(cur.size()-1);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;combination-sum-4:7a055b9f53e64947361af5747bddcbb5&#34;&gt;Combination Sum 4&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/combination-sum-iv/&#34;&gt;LeetCode 377&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.&lt;/p&gt;

&lt;h2 id=&#34;example-1:7a055b9f53e64947361af5747bddcbb5&#34;&gt;Example:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;nums = [1, 2, 3]
target = 4

The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)

Note that different sequences are counted as different combinations.

Therefore the output is 7.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution-1:7a055b9f53e64947361af5747bddcbb5&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;I used recursive solution first, but raised Time Limit Exceeded. This problem actually can be solve in DP because we only need to calculate the possible combinations for a subTarget once.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public int combinationSum4(int[] nums, int target) {
        int[] dp = new int[target+1];
        dp[0] = 1;
        for(int i = 1; i &amp;lt;= target; i ++) {
            for(int j = 0; j &amp;lt; nums.length; j ++) {
                if(i - nums[j] &amp;gt;= 0)
                    dp[i] += dp[i-nums[j]];
            }
        }
        return dp[target];
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Buy and Sell Stocks</title>
      <link>http://yjn93.github.io/dev/Buy_and_Sell_Stocks/</link>
      <pubDate>Fri, 18 Nov 2016 09:54:11 -0500</pubDate>
      
      <guid>http://yjn93.github.io/dev/Buy_and_Sell_Stocks/</guid>
      <description>

&lt;h1 id=&#34;one-transaction:bc34b67cdae43a991edbce9949a535fb&#34;&gt;One transaction&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/&#34;&gt;LeetCode 121&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution:bc34b67cdae43a991edbce9949a535fb&#34;&gt;Solution&lt;/h2&gt;

&lt;h3 id=&#34;my-approach:bc34b67cdae43a991edbce9949a535fb&#34;&gt;My approach&lt;/h3&gt;

&lt;p&gt;Track the min value, update the maxProfit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public int maxProfit(int[] prices) {
        int min = Integer.MAX_VALUE;
        int max = 0;
        for(int price: prices) {
            min = Math.min(min, price);
            max = Math.max(max, price-min);
        }
        return max;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;kadane-s-algorithm-solution:bc34b67cdae43a991edbce9949a535fb&#34;&gt;Kadane&amp;rsquo;s Algorithm Solution&lt;/h3&gt;

&lt;p&gt;Kadane&amp;rsquo;s Algorithm is used to solve Maximum Subarray problem
Here, the logic is to calculate the difference (maxCur += prices[i] - prices[i-1]) of the original array, and find a contiguous subarray giving maximum profit. If the difference falls below 0, reset it to zero.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public int maxProfit(int[] prices) {
        int curMax = 0;
        int max = 0;
        for(int i = 1; i &amp;lt; prices.length; i ++) {
            curMax = Math.max(0, curMax+prices[i]-prices[i-1]);
            max = Math.max(max, curMax);
        }
        return max;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;maximum-subarray-problem:bc34b67cdae43a991edbce9949a535fb&#34;&gt;Maximum Subarray Problem&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-subarray/&#34;&gt;LeetCode 53&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;example:bc34b67cdae43a991edbce9949a535fb&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;given the array [-2,1,-3,4,-1,2,1,-5,4], the contiguous subarray [4,-1,2,1] has the largest sum = 6.&lt;/p&gt;

&lt;h3 id=&#34;solution-1:bc34b67cdae43a991edbce9949a535fb&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;Using Kadane&amp;rsquo;s algorithm, which consists of a scan through the array values, computing at each position the maximum (positive sum) subarray ending at that position. This subarray is either empty (in which case its sum is zero) or consists of one more element than the maximum subarray ending at the previous position.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public int maxSubArray(int[] nums) {
        int max = Integer.MIN_VALUE;
        int leftMax = 0;
        for(int num: nums) {
            max = Math.max(max, leftMax+num);
            leftMax = Math.max(0, leftMax+num);
        }
        return max;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;notice:bc34b67cdae43a991edbce9949a535fb&#34;&gt;Notice&lt;/h3&gt;

&lt;p&gt;The corner case: all elements are negative.&lt;/p&gt;

&lt;h1 id=&#34;many-transactions:bc34b67cdae43a991edbce9949a535fb&#34;&gt;Many transactions&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/&#34;&gt;LeetCode 122&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;peak-and-valley-approach:bc34b67cdae43a991edbce9949a535fb&#34;&gt;Peak and Valley approach&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    public int maxProfit(int[] prices) {
        int result = 0;
        int idx = 0;
        while(idx &amp;lt; prices.length-1) {
            while(idx+1 &amp;lt; prices.length &amp;amp;&amp;amp; prices[idx+1] &amp;lt;= prices[idx])
                idx ++;
            int low = prices[idx];
            while(idx+1 &amp;lt; prices.length &amp;amp;&amp;amp; prices[idx+1] &amp;gt;= prices[idx])
                idx ++;
            result += prices[idx]-low;
            idx ++;
        }
        return result;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;simple-one-pass:bc34b67cdae43a991edbce9949a535fb&#34;&gt;Simple one pass&lt;/h2&gt;

&lt;p&gt;we can directly keep on adding the difference between the consecutive numbers of the array if the second number is larger than the first one, and at the total sum we obtain will be the maximum profit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public int maxProfit(int[] prices) {
        int max = 0;
        for(int i = 1; i &amp;lt; prices.length; i ++) {
            if(prices[i] &amp;gt; prices[i-1])
                max += prices[i]-prices[i-1];
        }
        return max;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;multiple-transactions-with-cooldown:bc34b67cdae43a991edbce9949a535fb&#34;&gt;Multiple transactions with cooldown&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&#34;&gt;LeetCode 309&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;example-1:bc34b67cdae43a991edbce9949a535fb&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;prices = [1, 2, 3, 0, 2]
maxProfit = 3
transactions = [buy, sell, cooldown, buy, sell]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution-2:bc34b67cdae43a991edbce9949a535fb&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;Dynamic programming: tracking the maxProfit for ending with sell and buy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buy[i] = max(sell[i-2]-price, buy[i-1])
sell[i] = max(buy[i-1]+price, sell[i-1])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can reduce the space:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;preBuy = curBuy;
curBuy = max(preSell-num, preBuy);
preSell = curSell;
curSell = max(preBuy+num, preSell);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Java code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public int maxProfit(int[] prices) {
        int preSell = 0, curSell = 0;
		int curBuy = Integer.MIN_VALUE, preBuy;
        for(int price: prices) {
            preBuy = curBuy;
            curBuy = Math.max(preSell - price, preBuy);
            preSell = curSell;
            curSell = Math.max(preBuy + price, preSell);
        }
        return curSell;
    }

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Counting Bits</title>
      <link>http://yjn93.github.io/dev/Counting-Bits/</link>
      <pubDate>Sat, 12 Nov 2016 15:10:24 -0500</pubDate>
      
      <guid>http://yjn93.github.io/dev/Counting-Bits/</guid>
      <description>

&lt;h1 id=&#34;problem-description:022354bb3fdd3cdde4f44cb9f57b56b0&#34;&gt;Problem description&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/counting-bits/&#34;&gt;LeetCode 338&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1&amp;rsquo;s in their binary representation and return them as an array.&lt;/p&gt;

&lt;h2 id=&#34;example:022354bb3fdd3cdde4f44cb9f57b56b0&#34;&gt;Example:&lt;/h2&gt;

&lt;p&gt;For num = 5 you should return [0,1,1,2,1,2]&lt;/p&gt;

&lt;h2 id=&#34;my-dp-solution:022354bb3fdd3cdde4f44cb9f57b56b0&#34;&gt;My DP Solution&lt;/h2&gt;

&lt;p&gt;This problem can be solved by dynamic programming because the count of bits follow certains rules as the number grows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;		0	0
		1	1
		2	10
		3	11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The number 2 is adding another bit 1 in front of number 0; the number 3 is adding another bit 1 at the beginning of number 1. So my solution is to track the previous size of numbers that can be represented by a fix number of bits. For example, we have 0, 1 initially, the size is 2. Then for 3, 4, we apply the formula:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dp[i] = dp[i-size] + 1
dp[2] = dp[2 - 2] + 1 = dp[0] + 1 
dp[3] = dp[3 - 2] + 1 = dp[1] + 1

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, for number 4, we need more bits to represent it, so the previous size is updated to 4, and dp[4], dp[5], dp[6], dp[7] can be calculated by dp[0], dp[1], dp[2], dp[3]. My code is as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public int[] countBits(int num) {
        if(num == 0) return new int[]{0};
        int[] dp = new int[num+1];
        dp[0] = 0;
        dp[1] = 1;
        int size = 2;
        for(int i = 2; i &amp;lt;= num; i ++) {
            if(i - size == size)
                size = i;
            dp[i] = 1 + dp[i-size];
        }
        return dp;
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;another-dp-solution-combining-bit-manipulation:022354bb3fdd3cdde4f44cb9f57b56b0&#34;&gt;Another DP solution combining Bit Manipulation&lt;/h2&gt;

&lt;p&gt;Instead of adding the bit 1 infront of the previous cycle, this brilliant solution think it as deleting the last bit to obtain the number of bits without last bit, then add another counting for last bit if the last bit is 1.&lt;/p&gt;

&lt;p&gt;4-line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public int[] countBits(int num) {
        int[] dp = new int[num+1];
        for(int i = 1; i &amp;lt;= num; i ++) 
            dp[i] = dp[i&amp;gt;&amp;gt;1] + (i&amp;amp;1);
        return dp;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the priority for &amp;amp; operator is lower than +, so we need to use () for (i&amp;amp;1).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>