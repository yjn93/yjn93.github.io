<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basic Algorithm on 木秀于南</title>
    <link>http://yjn93.github.io/tags/basic-algorithm/</link>
    <description>Recent content in Basic Algorithm on 木秀于南</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2016 Jianan Yue. All right reserved.</copyright>
    <lastBuildDate>Wed, 21 Dec 2016 09:59:54 -0500</lastBuildDate>
    <atom:link href="http://yjn93.github.io/tags/basic-algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>QuickSort</title>
      <link>http://yjn93.github.io/dev/QuickSort/</link>
      <pubDate>Wed, 21 Dec 2016 09:59:54 -0500</pubDate>
      
      <guid>http://yjn93.github.io/dev/QuickSort/</guid>
      <description>

&lt;h1 id=&#34;kth-largest-element-in-an-array:423f35d8021d43f6473e42ba8f0642fc&#34;&gt;Kth Largest Element in an Array&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/kth-largest-element-in-an-array/&#34;&gt;LeetCode 215&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find the kth largest element in an unsorted array.&lt;/p&gt;

&lt;h2 id=&#34;example:423f35d8021d43f6473e42ba8f0642fc&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;Given [3,2,1,5,6,4] and k = 2, return 5.&lt;/p&gt;

&lt;h2 id=&#34;solution:423f35d8021d43f6473e42ba8f0642fc&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;Quickselect, using quicksort idea. Two implementation of quicksort:&lt;/p&gt;

&lt;h3 id=&#34;first-implementation-of-partition:423f35d8021d43f6473e42ba8f0642fc&#34;&gt;First implementation of partition:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    public int partition(int[] nums, int start, int end) {
        int pivot = nums[start];
        int left = start, right = end+1;
        while(true) {
            while(left &amp;lt; end &amp;amp;&amp;amp; nums[++ left] &amp;lt; pivot);
            while(start &amp;lt; right &amp;amp;&amp;amp; nums[-- right] &amp;gt; pivot );
            if(left &amp;lt; right) swap(nums, left, right);
            else break;
        }
        swap(nums, start, right);
        return right;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;second-implementation-of-partition:423f35d8021d43f6473e42ba8f0642fc&#34;&gt;Second implementation of partition:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    public int partition(int[] nums, int lo, int hi) {
    	int left = lo, right = hi, pivot = a[hi];
    	while (left &amp;lt; right) {
	      if (a[left++] &amp;gt; pivot) swap(a, --`left, -- right);
    	}
    	swap(a, left, hi);
		return left;
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;complete-solution:423f35d8021d43f6473e42ba8f0642fc&#34;&gt;Complete Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    public int findKthLargest(int[] nums, int k) {
        k = nums.length - k;
        int lo = 0, hi = nums.length-1;
        while(lo &amp;lt; hi) {
            int split = partition(nums, lo, hi);
            if(split &amp;lt; k) lo = split+1;
            else if(split &amp;gt; k) hi = split - 1;
            else break;
        }
        return nums[k];
    }
    
    public int partition(int[] nums, int start, int end) {
        int pivot = nums[start];
        int left = start, right = end+1;
        while(true) {
            while(left &amp;lt; end &amp;amp;&amp;amp; nums[++ left] &amp;lt; pivot);
            while(start &amp;lt; right &amp;amp;&amp;amp; nums[-- right] &amp;gt; pivot );
            if(left &amp;lt; right) swap(nums, left, right);
            else break;
        }
        swap(nums, start, right);
        return right;
    }
    
    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>