<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basic Algorithm on 木秀于南</title>
    <link>http://yjn93.github.io/tags/basic-algorithm/</link>
    <description>Recent content in Basic Algorithm on 木秀于南</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2016 Jianan Yue. All right reserved.</copyright>
    <lastBuildDate>Fri, 13 Jan 2017 17:12:53 -0500</lastBuildDate>
    <atom:link href="http://yjn93.github.io/tags/basic-algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>KMP-String Pattern Match</title>
      <link>http://yjn93.github.io/dev/KMP/</link>
      <pubDate>Fri, 13 Jan 2017 17:12:53 -0500</pubDate>
      
      <guid>http://yjn93.github.io/dev/KMP/</guid>
      <description>

&lt;h1 id=&#34;kmp:cdddce7445004a283bb5a182f0d88bd4&#34;&gt;KMP&lt;/h1&gt;

&lt;p&gt;KMP is a string searching algorithm searches for occurrences of a &amp;ldquo;word&amp;rdquo; W within a main &amp;ldquo;text string&amp;rdquo; S by employing the observation that when a mismatch occurs, the word itself embodies sufficient information to determine where the next match could begin, thus bypassing re-examination of previously matched characters.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/v_july_v/article/details/7041827&#34;&gt;A link with detailed explanation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;calculate-longest-prefix-suffix-lps-array:cdddce7445004a283bb5a182f0d88bd4&#34;&gt;Calculate Longest Prefix Suffix (LPS) Array&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    public int[] kmp(String str) {
        int len = str.length();
        int[] LPS = new int[len];
        LPS[0] = 0;
        int k = 0, j = 1;
        while(j &amp;lt; len) {
            if(str.charAt(k) == str.charAt(j))
                LPS[j ++] = ++ k;
            else if(k == 0)
                LPS[j ++] = 0;
            else
                k = LPS[k-1];
        }
		return LPS;
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;calculate-next-array:cdddce7445004a283bb5a182f0d88bd4&#34;&gt;Calculate Next Array&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    public int[] kmp(String str) {
        int len = str.length();
        int[] next = new int[len];
        next[0] = -1;
        int k = -1, j = 0;
        while(j &amp;lt; len-1) {
            if(k == -1 || str.charAt(k) == str.charAt(j))
                next[++ j] = ++ k;
            else 
                k = next[k];
        }
        return next;
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;optimised-next-array:cdddce7445004a283bb5a182f0d88bd4&#34;&gt;Optimised Next Array&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    public int[] kmp(String str) {
        int len = str.length();
        int[] next = new int[len];
        next[0] = -1;
        int k = -1, j = 0;
        while(j &amp;lt; len-1) {
            if(k == -1 || str.charAt(k) == str.charAt(j)) {
                if(str.charAt(++ k) == str.charAt(++ j))
                    next[j] = next[k];  //make sure str(j) != str(next[j])
                else    
                    next[j] = k;
            }
            else 
                k = next[k];
        }
        return next;
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;encode-string-with-shortest-length:cdddce7445004a283bb5a182f0d88bd4&#34;&gt;Encode String with Shortest Length&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/encode-string-with-shortest-length/&#34;&gt;LeetCode 471&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;solution:cdddce7445004a283bb5a182f0d88bd4&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;dp[i][j] = string from index i to index j in encoded form.&lt;/p&gt;

&lt;p&gt;We can write the following formula as:-
dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j]) or if we can find some pattern in string from i to j which will result in more less length.&lt;/p&gt;

&lt;p&gt;Time Complexity = O(n^3)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public String encode(String s) {
        if(s == null || s.length() &amp;lt; 5) return s;
        int len = s.length();
        String[][] dp = new String[len][len];
        
        for(int l = 0; l &amp;lt; len; l ++) {
            for(int i = 0; i &amp;lt; len-l; i ++) {
                int j = i + l;
                String str = s.substring(i, j + 1);
                dp[i][j] = str;
                if(l &amp;lt; 4) continue;
                for(int k = i; k &amp;lt; j; k ++) {
                    if(dp[i][k].length() + dp[k+1][j].length() &amp;lt; dp[i][j].length())
                        dp[i][j] = dp[i][k] + dp[k+1][j];
                }
                String pattern = kmp(str);
                if(pattern.length() == str.length()) continue;  // no repeat pattern found
                String patternEncode = str.length()/pattern.length() + &amp;quot;[&amp;quot; + dp[i][i+pattern.length()-1] + &amp;quot;]&amp;quot;;
                if(patternEncode.length() &amp;lt; dp[i][j].length())
                    dp[i][j] = patternEncode;
            }
        }
        System.out.println(dp[0][7]);
        return dp[0][len-1];
    }
    
    public String kmp(String str) {
        int len = str.length();
        int[] LPS = new int[len];
        LPS[0] = 0;
        int k = 0, j = 1;
        while(j &amp;lt; len) {
            if(str.charAt(k) == str.charAt(j))
                LPS[j ++] = ++ k;
            else if(k == 0)
                LPS[j ++] = 0;
            else
                k = LPS[k-1];
        }
        String pattern = str.substring(LPS[len-1]);
        if(pattern.length() != len &amp;amp;&amp;amp; len % pattern.length() == 0)
            return pattern;
        return str;
    }

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Knapsack</title>
      <link>http://yjn93.github.io/dev/Knapsack/</link>
      <pubDate>Wed, 21 Dec 2016 12:19:33 -0500</pubDate>
      
      <guid>http://yjn93.github.io/dev/Knapsack/</guid>
      <description>

&lt;h1 id=&#34;knapsack-problem:c06120d33a3798cdda1b16554d032ce1&#34;&gt;Knapsack problem&lt;/h1&gt;

&lt;p&gt;Given weights (wt[i]) and values (val[i]) of n items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack.&lt;/p&gt;

&lt;h2 id=&#34;basic-dp:c06120d33a3798cdda1b16554d032ce1&#34;&gt;Basic dp&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;K[i][v]=max{K[i-1][v],K[i-1][v-wt[i]]+val[i]}

int knapSack(int W, int wt[], int val[], int n)
{
   int i, w;
   int K[n+1][W+1];
 
   // Build table K[][] in bottom up manner
   for (i = 0; i &amp;lt;= n; i++)
   {
       for (w = 0; w &amp;lt;= W; w++)
       {
           if (i==0 || w==0)
               K[i][w] = 0;
           else if (wt[i-1] &amp;lt;= w)
                 K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]],  K[i-1][w]);
           else
                 K[i][w] = K[i-1][w];
       }
   }
 
   return K[n][W];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;space-optimization:c06120d33a3798cdda1b16554d032ce1&#34;&gt;Space optimization&lt;/h2&gt;

&lt;p&gt;To make sure in ith loop, K[v-wt[i]] stores previous K[i-1][v-wt[i]], the inner for loop should index in decreasing order.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for i = 1 .. N
	for v = W .. 0
		K[v]=max{K[v],K[v-wt[i]]+val[i]}

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;partition-equal-subset-sum:c06120d33a3798cdda1b16554d032ce1&#34;&gt;Partition Equal Subset Sum&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/partition-equal-subset-sum/&#34;&gt;LeetCode 416&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.&lt;/p&gt;

&lt;h2 id=&#34;example:c06120d33a3798cdda1b16554d032ce1&#34;&gt;Example:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Input: [1, 5, 11, 5]

Output: true

Explanation: The array can be partitioned as [1, 5, 5] and [11].

Input: [1, 2, 3, 5]

Output: false

Explanation: The array cannot be partitioned into equal sum subsets.

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution:c06120d33a3798cdda1b16554d032ce1&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    public boolean canPartition(int[] nums) {
        int sum = 0;
        for(int num: nums) {
            sum += num;
        }
        if(sum % 2 != 0) return false;
        sum /= 2;
        boolean[] dp = new boolean[sum + 1];
        dp[0] = true;
        for(int i = 0; i &amp;lt; nums.length; i ++) {
            for(int j = sum; j &amp;gt;= nums[i]; j --) {
                dp[j] = dp[j] || dp[j - nums[i]];
            }
        }
        
        return dp[sum];
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>QuickSort</title>
      <link>http://yjn93.github.io/dev/QuickSort/</link>
      <pubDate>Wed, 21 Dec 2016 09:59:54 -0500</pubDate>
      
      <guid>http://yjn93.github.io/dev/QuickSort/</guid>
      <description>

&lt;h1 id=&#34;kth-largest-element-in-an-array:423f35d8021d43f6473e42ba8f0642fc&#34;&gt;Kth Largest Element in an Array&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/kth-largest-element-in-an-array/&#34;&gt;LeetCode 215&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find the kth largest element in an unsorted array.&lt;/p&gt;

&lt;h2 id=&#34;example:423f35d8021d43f6473e42ba8f0642fc&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;Given [3,2,1,5,6,4] and k = 2, return 5.&lt;/p&gt;

&lt;h2 id=&#34;solution:423f35d8021d43f6473e42ba8f0642fc&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;Quickselect, using quicksort idea. Two implementation of quicksort:&lt;/p&gt;

&lt;h3 id=&#34;first-implementation-of-partition:423f35d8021d43f6473e42ba8f0642fc&#34;&gt;First implementation of partition:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    public int partition(int[] nums, int start, int end) {
        int pivot = nums[start];
        int left = start, right = end+1;
        while(true) {
            while(left &amp;lt; end &amp;amp;&amp;amp; nums[++ left] &amp;lt; pivot);
            while(start &amp;lt; right &amp;amp;&amp;amp; nums[-- right] &amp;gt; pivot );
            if(left &amp;lt; right) swap(nums, left, right);
            else break;
        }
        swap(nums, start, right);
        return right;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;second-implementation-of-partition:423f35d8021d43f6473e42ba8f0642fc&#34;&gt;Second implementation of partition:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    public int partition(int[] nums, int lo, int hi) {
    	int left = lo, right = hi, pivot = a[hi];
    	while (left &amp;lt; right) {
	      if (a[left++] &amp;gt; pivot) swap(a, --`left, -- right);
    	}
    	swap(a, left, hi);
		return left;
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;complete-solution:423f35d8021d43f6473e42ba8f0642fc&#34;&gt;Complete Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;    public int findKthLargest(int[] nums, int k) {
        k = nums.length - k;
        int lo = 0, hi = nums.length-1;
        while(lo &amp;lt; hi) {
            int split = partition(nums, lo, hi);
            if(split &amp;lt; k) lo = split+1;
            else if(split &amp;gt; k) hi = split - 1;
            else break;
        }
        return nums[k];
    }
    
    public int partition(int[] nums, int start, int end) {
        int pivot = nums[start];
        int left = start, right = end+1;
        while(true) {
            while(left &amp;lt; end &amp;amp;&amp;amp; nums[++ left] &amp;lt; pivot);
            while(start &amp;lt; right &amp;amp;&amp;amp; nums[-- right] &amp;gt; pivot );
            if(left &amp;lt; right) swap(nums, left, right);
            else break;
        }
        swap(nums, start, right);
        return right;
    }
    
    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>