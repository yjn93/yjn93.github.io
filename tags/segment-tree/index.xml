<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Segment Tree on 木秀于南</title>
    <link>http://yjn93.github.io/tags/segment-tree/</link>
    <description>Recent content in Segment Tree on 木秀于南</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2016 Jianan Yue. All right reserved.</copyright>
    <lastBuildDate>Fri, 20 Jan 2017 00:15:59 -0500</lastBuildDate>
    <atom:link href="http://yjn93.github.io/tags/segment-tree/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Binary Indexed Trees</title>
      <link>http://yjn93.github.io/dev/BIT/</link>
      <pubDate>Fri, 20 Jan 2017 00:15:59 -0500</pubDate>
      
      <guid>http://yjn93.github.io/dev/BIT/</guid>
      <description>

&lt;h1 id=&#34;bit:32b8e87fcf011b19f769e4a32f7c0999&#34;&gt;BIT&lt;/h1&gt;

&lt;p&gt;Binary Indexed Trees is often used for storing frequencies and manipulating cumulative frequency tables.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.topcoder.com/community/data-science/data-science-tutorials/binary-indexed-trees/&#34;&gt;TopCoder explanation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;init-tree:32b8e87fcf011b19f769e4a32f7c0999&#34;&gt;Init tree&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    void init(int[] nums) {
        maxIdx = nums.length;
        //The index of BIT starts from 1
        BIT = new int[maxIdx + 1];
        for(int i = 0; i &amp;lt; maxIdx; i ++)
            updateBIT(i+1, nums[i]);
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;read:32b8e87fcf011b19f769e4a32f7c0999&#34;&gt;Read&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    int readBIT(int idx) {
        int sum = 0;
        while(idx &amp;gt; 0) {
            sum += BIT[idx];
            idx -= (idx &amp;amp; -idx);
        }
        return sum;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;update:32b8e87fcf011b19f769e4a32f7c0999&#34;&gt;Update&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    void updateBIT(int idx, int diff) {
        while(idx &amp;lt;= maxIdx) {
            BIT[idx] += diff;
            idx += (idx &amp;amp; -idx);
        } 
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;range-sum-query-mutable:32b8e87fcf011b19f769e4a32f7c0999&#34;&gt;Range Sum Query - Mutable&lt;/h1&gt;

&lt;p&gt;Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.&lt;/p&gt;

&lt;p&gt;The update(i, val) function modifies nums by updating the element at index i to val.&lt;/p&gt;

&lt;h2 id=&#34;example:32b8e87fcf011b19f769e4a32f7c0999&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Given nums = [1, 3, 5]

sumRange(0, 2) -&amp;gt; 9
update(1, 2)
sumRange(0, 2) -&amp;gt; 8

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution-segment-tree:32b8e87fcf011b19f769e4a32f7c0999&#34;&gt;Solution - Segment Tree&lt;/h2&gt;

&lt;p&gt;Segement Tree is like a complete binary tree. Each node represent sum of some range (from a start index to an end index). The children of one node has a subrange of the range.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    segmentNode root;
    int[] nums;

    public NumArray(int[] nums) {
        this.nums = nums;
        if(nums.length != 0)
        root = buildTree(nums, 0, nums.length-1);
    }

    segmentNode buildTree(int[] nums, int start, int end) {
        segmentNode root = new segmentNode(start, end);
        if(start == end)
            root.sum = nums[start];
        else {
            int mid = (end-start)/2 + start;
            root.left = buildTree(nums, start, mid);
            root.right = buildTree(nums, mid+1, end);
            root.sum = root.left.sum + root.right.sum;
        }
        return root;
    }
    
    void update(int i, int val) {
        int diff = nums[i] - val;
        nums[i] = val;
        updateNode(root, i, diff);
    }
    
    void updateNode(segmentNode root, int i, int diff) {
        if(root == null || root.start &amp;gt; i || root.end &amp;lt; i) return;
        root.sum -= diff;
        updateNode(root.left, i, diff);
        updateNode(root.right, i, diff);
    }

    public int sumRange(int i, int j) {
        return sumRange(root, i, j);
    }
    
    int sumRange(segmentNode root, int i, int j) {
        if(root == null || root.start &amp;gt; j || root.end &amp;lt; i) return 0;
        if(root.start &amp;gt;= i &amp;amp;&amp;amp; root.end &amp;lt;= j) return root.sum;
        return sumRange(root.left, i, j) + sumRange(root.right, i, j);
    }
    
}

class segmentNode {
    int start;
    int end;
    int sum;
    segmentNode left;
    segmentNode right;
    
    segmentNode(int start, int end) {
        this.start = start;
        this.end = end;
        this.sum = 0;
        left = null;
        right = null;
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution-bit:32b8e87fcf011b19f769e4a32f7c0999&#34;&gt;Solution - BIT&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    int[] nums;
    int[] BIT;
    int maxIdx;

    public NumArray(int[] nums) {
        this.nums = nums;
        init(nums);
    }

    void init(int[] nums) {
        maxIdx = nums.length;
        //The index of BIT starts from 1
        BIT = new int[maxIdx + 1];
        for(int i = 0; i &amp;lt; maxIdx; i ++)
            updateBIT(i+1, nums[i]);
    }
    
    void updateBIT(int idx, int diff) {
        while(idx &amp;lt;= maxIdx) {
            BIT[idx] += diff;
            idx += (idx &amp;amp; -idx);
        } 
    }
    
    void update(int i, int val) {
        int diff = val - nums[i];
        nums[i] = val;
        updateBIT(i+1, diff);
    }
    
    int readBIT(int idx) {
        int sum = 0;
        while(idx &amp;gt; 0) {
            sum += BIT[idx];
            idx -= (idx &amp;amp; -idx);
        }
        return sum;
    }
    
    public int sumRange(int i, int j) {
        return readBIT(j+1) - readBIT(i);
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;range-sum-query-2d-mutable:32b8e87fcf011b19f769e4a32f7c0999&#34;&gt;Range Sum Query 2D - Mutable&lt;/h1&gt;

&lt;p&gt;Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).&lt;/p&gt;

&lt;h2 id=&#34;example-1:32b8e87fcf011b19f769e4a32f7c0999&#34;&gt;Example&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -&amp;gt; 8
update(3, 2, 2)
sumRegion(2, 1, 4, 3) -&amp;gt; 10

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution:32b8e87fcf011b19f769e4a32f7c0999&#34;&gt;Solution&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    int[][] BIT;
    int[][] nums;
    int m;
    int n;

    public NumMatrix(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return;
        m = matrix.length;
        n = matrix[0].length;
        nums = matrix;
        BIT = new int[m+1][n+1];
        for(int i = 0; i &amp;lt; m; i ++) {
            for(int j = 0; j &amp;lt; n; j ++) {
                updateBIT(i+1, j+1, matrix[i][j]);
            }
        }
    }

    public void update(int row, int col, int val) {
        int diff = val - nums[row][col];
        nums[row][col] = val;
        updateBIT(row+1, col+1, diff);
    }
    
    public void updateBIT(int x, int y, int diff) {
        for(int i = x; i &amp;lt;= m; i += (i &amp;amp; -i))  {
            for(int j = y; j &amp;lt;= n; j += (j &amp;amp; -j)) {
                BIT[i][j] += diff;
            }
        }
    }
    
    public int readBIT(int x, int y) {
        int sum = 0;
        for(int i = x; i &amp;gt; 0; i -=(i &amp;amp; -i)) {
            for(int j = y; j &amp;gt; 0; j -= (j &amp;amp; -j)) {
                sum += BIT[i][j];
            }
        }
        return sum;
    }

    public int sumRegion(int row1, int col1, int row2, int col2) {
        return readBIT(row2+1, col2+1) - readBIT(row2+1, col1) - readBIT(row1, col2+1) + readBIT(row1, col1);
    }

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>